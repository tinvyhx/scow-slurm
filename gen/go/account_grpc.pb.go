//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: account.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_ListAccounts_FullMethodName            = "/scow.scheduler_adapter.AccountService/ListAccounts"
	AccountService_CreateAccount_FullMethodName           = "/scow.scheduler_adapter.AccountService/CreateAccount"
	AccountService_BlockAccount_FullMethodName            = "/scow.scheduler_adapter.AccountService/BlockAccount"
	AccountService_UnblockAccount_FullMethodName          = "/scow.scheduler_adapter.AccountService/UnblockAccount"
	AccountService_GetAllAccountsWithUsers_FullMethodName = "/scow.scheduler_adapter.AccountService/GetAllAccountsWithUsers"
	AccountService_QueryAccountBlockStatus_FullMethodName = "/scow.scheduler_adapter.AccountService/QueryAccountBlockStatus"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// *
	// description: list accounts for a user
	// errors:
	//   - user not exist
	//     NOT_FOUND, USER_NOT_FOUND, {}
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	// description: create account and specify owner
	// errors:
	//   - account exist
	//     ALREADY_EXISTS, ACCOUNT_ALREADY_EXISTS, {}
	//   - owner id not exist
	//     NOT_FOUND, USER_NOT_FOUND, {}
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// description: block an account
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	//
	// special case:
	// - account already blocked, don't throw error
	BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*BlockAccountResponse, error)
	// description: unblock an account
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	//
	// special case:
	// - account already unblocked, don't throw error
	UnblockAccount(ctx context.Context, in *UnblockAccountRequest, opts ...grpc.CallOption) (*UnblockAccountResponse, error)
	// description: get all accounts and all associated users
	// special case:
	// - account no users, exclude this account
	GetAllAccountsWithUsers(ctx context.Context, in *GetAllAccountsWithUsersRequest, opts ...grpc.CallOption) (*GetAllAccountsWithUsersResponse, error)
	// description: query if an account is blocked
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	QueryAccountBlockStatus(ctx context.Context, in *QueryAccountBlockStatusRequest, opts ...grpc.CallOption) (*QueryAccountBlockStatusResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, AccountService_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) BlockAccount(ctx context.Context, in *BlockAccountRequest, opts ...grpc.CallOption) (*BlockAccountResponse, error) {
	out := new(BlockAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_BlockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UnblockAccount(ctx context.Context, in *UnblockAccountRequest, opts ...grpc.CallOption) (*UnblockAccountResponse, error) {
	out := new(UnblockAccountResponse)
	err := c.cc.Invoke(ctx, AccountService_UnblockAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAllAccountsWithUsers(ctx context.Context, in *GetAllAccountsWithUsersRequest, opts ...grpc.CallOption) (*GetAllAccountsWithUsersResponse, error) {
	out := new(GetAllAccountsWithUsersResponse)
	err := c.cc.Invoke(ctx, AccountService_GetAllAccountsWithUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) QueryAccountBlockStatus(ctx context.Context, in *QueryAccountBlockStatusRequest, opts ...grpc.CallOption) (*QueryAccountBlockStatusResponse, error) {
	out := new(QueryAccountBlockStatusResponse)
	err := c.cc.Invoke(ctx, AccountService_QueryAccountBlockStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations should embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// *
	// description: list accounts for a user
	// errors:
	//   - user not exist
	//     NOT_FOUND, USER_NOT_FOUND, {}
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	// description: create account and specify owner
	// errors:
	//   - account exist
	//     ALREADY_EXISTS, ACCOUNT_ALREADY_EXISTS, {}
	//   - owner id not exist
	//     NOT_FOUND, USER_NOT_FOUND, {}
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// description: block an account
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	//
	// special case:
	// - account already blocked, don't throw error
	BlockAccount(context.Context, *BlockAccountRequest) (*BlockAccountResponse, error)
	// description: unblock an account
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	//
	// special case:
	// - account already unblocked, don't throw error
	UnblockAccount(context.Context, *UnblockAccountRequest) (*UnblockAccountResponse, error)
	// description: get all accounts and all associated users
	// special case:
	// - account no users, exclude this account
	GetAllAccountsWithUsers(context.Context, *GetAllAccountsWithUsersRequest) (*GetAllAccountsWithUsersResponse, error)
	// description: query if an account is blocked
	// errors:
	//   - account not exist
	//     NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	QueryAccountBlockStatus(context.Context, *QueryAccountBlockStatusRequest) (*QueryAccountBlockStatusResponse, error)
}

// UnimplementedAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) BlockAccount(context.Context, *BlockAccountRequest) (*BlockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (UnimplementedAccountServiceServer) UnblockAccount(context.Context, *UnblockAccountRequest) (*UnblockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetAllAccountsWithUsers(context.Context, *GetAllAccountsWithUsersRequest) (*GetAllAccountsWithUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccountsWithUsers not implemented")
}
func (UnimplementedAccountServiceServer) QueryAccountBlockStatus(context.Context, *QueryAccountBlockStatusRequest) (*QueryAccountBlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccountBlockStatus not implemented")
}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_BlockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).BlockAccount(ctx, req.(*BlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UnblockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UnblockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_UnblockAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UnblockAccount(ctx, req.(*UnblockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAllAccountsWithUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAccountsWithUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAllAccountsWithUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAllAccountsWithUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAllAccountsWithUsers(ctx, req.(*GetAllAccountsWithUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_QueryAccountBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountBlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).QueryAccountBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_QueryAccountBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).QueryAccountBlockStatus(ctx, req.(*QueryAccountBlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scow.scheduler_adapter.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _AccountService_ListAccounts_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _AccountService_BlockAccount_Handler,
		},
		{
			MethodName: "UnblockAccount",
			Handler:    _AccountService_UnblockAccount_Handler,
		},
		{
			MethodName: "GetAllAccountsWithUsers",
			Handler:    _AccountService_GetAllAccountsWithUsers_Handler,
		},
		{
			MethodName: "QueryAccountBlockStatus",
			Handler:    _AccountService_QueryAccountBlockStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
